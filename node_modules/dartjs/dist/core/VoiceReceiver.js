"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceReceiver = void 0;
const voice_1 = require("@discordjs/voice");
const tiny_typed_emitter_1 = require("tiny-typed-emitter");
const prism_media_1 = __importDefault(require("prism-media"));
const stream_1 = require("stream");
class VoiceReceiver extends tiny_typed_emitter_1.TypedEmitter {
    constructor(client, connection) {
        super();
        this.client = client;
        this.connection = connection;
    }
    cleanUp() {
        this.connection.voice.receiver.speaking.removeAllListeners("start");
        this.connection.voice.receiver.speaking.removeAllListeners("end");
    }
    /**
     * Create receiver stream
     * @param user The target user to listen to
     * @param options Receiver options
     */
    createStream(user, options = {}) {
        var _a;
        const _user = this.client.users.resolveId(user);
        options !== null && options !== void 0 ? options : (options = { end: "silence", mode: "opus" });
        const passThrough = new stream_1.PassThrough();
        const receiver = (_a = this.connection.voice) === null || _a === void 0 ? void 0 : _a.receiver;
        if (!receiver.speaking.eventNames().includes("end"))
            receiver.speaking.on("end", (userId) => {
                this.emit("debug", `${userId} stopped speaking!`);
            });
        receiver.speaking.on("start", (userId) => {
            if (userId === _user) {
                const opusStream = receiver.subscribe(_user, {
                    end: {
                        behavior: options.end === "silence" ? voice_1.EndBehaviorType.AfterSilence : voice_1.EndBehaviorType.Manual,
                        duration: 100
                    }
                });
                setImmediate(() => {
                    if (options.mode === "pcm") {
                        const pcmStream = new prism_media_1.default.opus.Decoder({
                            channels: 2,
                            frameSize: 960,
                            rate: 48000
                        });
                        opusStream.pipe(pcmStream);
                        return pcmStream.pipe(passThrough);
                    }
                    else {
                        return opusStream.pipe(passThrough);
                    }
                });
            }
        });
        return passThrough;
    }
}
exports.VoiceReceiver = VoiceReceiver;
