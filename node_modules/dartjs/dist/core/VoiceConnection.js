"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceConnection = void 0;
const voice_1 = require("@discordjs/voice");
const tiny_typed_emitter_1 = require("tiny-typed-emitter");
const Util_1 = require("../Utils/Util");
const StreamDispatcher_1 = __importDefault(require("./StreamDispatcher"));
const VoiceReceiver_1 = require("./VoiceReceiver");
class VoiceConnection extends tiny_typed_emitter_1.TypedEmitter {
    constructor(voice, options) {
        super();
        this.voice = voice;
        this.options = options;
        this.client = this.options.channel.client;
        this.channel = this.options.channel;
        this.dispatcher = null;
        this.voiceManager = this.options.manager;
        this.receiver = new VoiceReceiver_1.VoiceReceiver(this.client, this);
    }
    /**
     * The audio player
     */
    get audioPlayer() {
        var _a;
        return (_a = this.dispatcher) === null || _a === void 0 ? void 0 : _a.audioPlayer;
    }
    /**
     * Disconnect from this connection
     */
    disconnect() {
        try {
            this.dispatcher.removeAllListeners();
            this.receiver.removeAllListeners();
            this.voice.disconnect();
        }
        catch (_a) {
            /* noop */
        }
    }
    /**
     * Destroy this connection
     */
    destroy() {
        try {
            this.voiceManager.connections.delete(this.channel.guildId);
            this.dispatcher.removeAllListeners();
            this.receiver.removeAllListeners();
            this.voice.destroy();
        }
        catch (_a) {
            /* noop */
        }
    }
    /**
     * Create a voice connection
     * @param channel The voice channel
     * @param manager The voice manager
     * @param options Join config
     */
    static createConnection(channel, manager, options) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const [error, connection] = yield (0, Util_1.catchError)(() => VoiceConnection.joinChannel(channel, options));
            if (error)
                return reject(error);
            const vc = new VoiceConnection(connection, {
                channel,
                manager
            });
            resolve(vc);
        }));
    }
    /**
     * Join a voice channel
     * @param channel The voice channel
     * @param options The join config
     */
    static joinChannel(channel, options) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const rawConnection = (0, voice_1.joinVoiceChannel)({
                guildId: channel.guild.id,
                channelId: channel.id,
                adapterCreator: channel.guild.voiceAdapterCreator,
                selfDeaf: !!(options === null || options === void 0 ? void 0 : options.selfDeaf),
                selfMute: !!(options === null || options === void 0 ? void 0 : options.selfMute),
                group: options === null || options === void 0 ? void 0 : options.group
            });
            const [error, connection] = yield (0, Util_1.catchError)(() => {
                return (0, voice_1.entersState)(rawConnection, voice_1.VoiceConnectionStatus.Ready, 30000);
            });
            if (error)
                return reject(error);
            resolve(connection);
        }));
    }
    /**
     * Play readable stream or remote stream source in this connection
     * @param stream The stream source
     * @param options The play options
     */
    play(stream, options) {
        if (!this.dispatcher) {
            const dispatcher = new StreamDispatcher_1.default(this, (options === null || options === void 0 ? void 0 : options.behaviours)
                ? {
                    behaviors: options.behaviours
                }
                : {});
            this.dispatcher = dispatcher;
        }
        this.dispatcher.playStream(stream, options);
        return this.dispatcher;
    }
    /**
     * The voice connection status
     */
    get status() {
        return this.voice.state.status;
    }
    /**
     * The voice connection latency (udp)
     */
    get ping() {
        const latency = this.voice.ping.udp;
        return typeof latency !== "number" ? NaN : latency;
    }
}
exports.default = VoiceConnection;
exports.VoiceConnection = VoiceConnection;
